---

- name: fetch all icingaversions in upgrade path
  shell: "ls /usr/share/icinga2-ido-mysql/schema/upgrade/ |sed 's/.sql//'|sort --version-sort"
  register: icinga2_schema_upgrade_icingaversions
  changed_when: False
  when: ("ido-mysql" in icinga2_features)
  tags:
    - update

- name: fetch all ido dbversions in upgrade path
  shell: grep -Po "^INSERT INTO icinga_dbversion.*idoutils.*NOW" /usr/share/icinga2-ido-mysql/schema/upgrade/* | sed "s/.*'idoutils',\s*'\(\S*\)',\s.*/\1/" | sort --version-sort
  register: icinga2_schema_upgrade_dbversions
  changed_when: False
  when: ("ido-mysql" in icinga2_features)
  tags:
    - update

- name: Check Icinga 2 schema version
  command:
    mysql
    -h {{ icinga2_ido_host|quote }}
    -u {{ icinga2_ido_user|quote }}
    -p{{ icinga2_ido_password|quote }}
    {{ "--ssl" if icinga2_mysql_ssl else '' }}
    {{ "--ssl-verify-server-cert" if ( icinga2_mysql_ssl_verify_server_cert ) else '' }}
    {{ ( '--ssl-ca' + ' ' + icinga2_mysql_ssl_certs_ca_path ) | quote if ( icinga2_mysql_ssl_verify_server_cert or icinga2_mysql_ssl_X509 ) else '' }}
    {{ ( '--ssl-cert' + ' ' + icinga2_mysql_ssl_certs_cert_path ) | quote if icinga2_mysql_ssl_X509 else '' }}
    {{ ( '--ssl-key' + ' ' + icinga2_mysql_ssl_certs_privkey_path ) | quote if icinga2_mysql_ssl_X509 else '' }}
    {{ icinga2_ido_dbname|quote }}
    -Ns -e "select version from "{{ icinga2_ido_dbname }}".icinga_dbversion;"
  ignore_errors: yes
  register: schema_result
  changed_when: schema_result.rc == 0
                and schema_result.stdout | version_compare((icinga2_schema_upgrade_dbversions.stdout_lines|last), operator='lt', strict=True)
  tags:
    - update

# I must run this task twice as I really don't know how to pass None, Null, empty or something to ssl_key. It must be undefined, NOT '' string.
- name: Do the upgrade without REQUIRE X509
  mysql_db:
    login_host: "{{ icinga2_ido_host }}"
    login_port: "{{ icinga2_ido_port }}"
    login_user: "{{ icinga2_ido_user }}"
    login_password: "{{ icinga2_ido_password }}"
    config_file: "{{ icinga2_ansible_user_dir }}/.my.cnf"
    name: "{{ icinga2_ido_dbname }}"
    ssl_ca: "{{ icinga2_mysql_ssl_certs_ca_path|quote if ( icinga2_mysql_ssl_verify_server_cert or icinga2_mysql_ssl_X509 or icinga2_mysql_ssl ) else NONE }}"
    target: "/usr/share/icinga2-ido-mysql/schema/upgrade/{{item.1}}.sql"
    state: import
  run_once: true
  with_together:
    - "{{ icinga2_schema_upgrade_dbversions.stdout_lines }}"
    - "{{ icinga2_schema_upgrade_icingaversions.stdout_lines }}"
  when: schema_result.changed
        and item.0 | version_compare(schema_result.stdout, operator='gt', strict=True)
        and not icinga2_mysql_ssl_X509
  tags:
    - update

- name: Do the upgrade with REQUIRE X509
  mysql_db:
    login_host: "{{ icinga2_ido_host }}"
    login_port: "{{ icinga2_ido_port }}"
    login_user: "{{ icinga2_ido_user }}"
    login_password: "{{ icinga2_ido_password }}"
    config_file: "{{ icinga2_ansible_user_dir }}/.my.cnf"
    name: "{{ icinga2_ido_dbname }}"
    ssl_ca: "{{ icinga2_mysql_ssl_certs_ca_path|quote if ( icinga2_mysql_ssl_verify_server_cert or icinga2_mysql_ssl_X509 or icinga2_mysql_ssl ) else NONE }}"
    ssl_cert: "{{ icinga2_mysql_ssl_certs_cert_path|quote if ( icinga2_mysql_ssl_X509 ) else 'None' }}"
    ssl_key: "{{ icinga2_mysql_ssl_certs_privkey_path|quote if ( icinga2_mysql_ssl_X509 ) else 'None' }}"
    target: "/usr/share/icinga2-ido-mysql/schema/upgrade/{{item.1}}.sql"
    state: import
  run_once: true
  with_together:
    - "{{ icinga2_schema_upgrade_dbversions.stdout_lines }}"
    - "{{ icinga2_schema_upgrade_icingaversions.stdout_lines }}"
  when: schema_result.changed
        and item.0 | version_compare(schema_result.stdout, operator='gt', strict=True)
        and icinga2_mysql_ssl_X509
  tags:
    - update
